{"content": {"Introduction": {"para_sentences": {"para_0": "When you are given a problem that can be solved using recursion, did you wonder if there is any technique that you can use directly to solve the problem? Well, 'Divide and Conquer' technique is one such common approach that can be used to solve an algorithm recursively. We will explore it in this section and solve a few common problems using this approach.", "para_1": "By the end of this section, you will able to implement a divide-and-conquer algorithm (MLO3).", "para_2": "While going through the exploration try to answer these questions:"}, "li_sentences": {"ul_0": ["What is a divide-and-conquer strategy?", "How to approach and solve a problem using the divide-and-conquer strategy?"]}}, "Divide and Conquer": {"para_sentences": {"para_0": "Divide and conquer approach basically divides the problem into smaller subproblems and then conquer (or solve) the subproblems first, then combine the results of the subproblem to get the solution of the original problem.", "para_1": "We follow three steps:", "para_2": "", "para_3": "We will mostly deal with lists/arrays here. When we have an array that we want to Divide-and-Conquer our first task will be to break it into two parts (say two halves). To divide the array into two halves we calculate the middle index. Then for each half, we will find the middle and divide further. This will go on until we cannot divide it any further.", "para_4": "", "para_5": "Let us see how to implement this using a sample scenario.\u00a0", "para_6": "Problem: We need to double the value of each element in a given array.", "para_7": "input: [1,2,3,4,5,6,7]", "para_8": "output: [2,4,6,8,10,12,14]", "para_9": "This is a simple problem, you can do it using a loop. Let's see how to solve this problem using the divide and conquer technique.", "para_10": "Our strategy will be to divide this array into half recursively until we reach a single element, which will be our base case, then double the value of the single element.", "para_11": "To do this we need to keep track of the middle position over each iteration. When we are dividing the array into smaller arrays, we need not create new arrays, it is sufficient if we can keep track of the starting index position and last index position of the sub-arrays.\u00a0 Let's say our recursive function name is 'foo'. Based on our discussion it will need three parameters: foo(arr, start, end)\u00a0", "para_12": "arr: The Array given in the problem", "para_13": "start: The starting index position of the array", "para_14": "end: The last index position of the array", "para_15": "You might think, why not use a helper function? Actually that would be the best approach, but for now, to simplify our code let us consider these parameters to be part of the main 'foo' function itself.", "para_16": "The below figure shows the divide step of the foo function. Note, we are not creating new arrays here.", "para_17": "", "para_18": "The pseudocode for the divide step will be:", "para_19": "Once we have reached the smallest size of our problem (the base case), we can perform the 'conquer' step, i.e solve the smaller sized problem. Now, we can double each item of the array.", "para_20": "", "para_21": "The pseudocode for the conquer step will be:", "para_22": "The last step is the combine step, which in this case is automatically done by the recursive function as it returns from the base case.", "para_23": "Below is a graphical representation of how we reach to a single element(1) via recursion. Notice that when we reach the smallest sized array the start index pointer is equal to end index pointer, i.e. the recursion has reached the base case.", "para_24": "The pseudocode for this algorithm will be:", "para_25": "Can you try implementing it in the below code editor? The solution is provided in the solution.py file. You can optionally copy the contents of the solution file to the main.py file and execute the code. You can access the solution from the GitHub link\n\n\nLinks to an external site. .\u00a0", "para_26": "", "para_27": "Conclusion: We used two-pointers (start and end) to solve the problem using the divide and conquer technique. By not creating smaller arrays but just tracking the index positions of the sub-arrays we are saving the memory (space) needed to execute our program.", "para_28": "Let us see what is the time complexity of our algorithm.", "para_29": "For this, we will use what have learnt in previous explorations.", "para_30": "First, write the recurrence relation. Then solve it to find the growth function using one of the three methods that we have seen in 'Recurrence Relations' section.", "para_31": "You may attempt this by yourself before looking at the solution below.", "para_32": "The base case and recursive case of the 'foo' function will be:", "para_33": "The base case runs is independent of the size of the array hence it will take constant time c1.\u00a0", "para_34": "The recursive case recursively works on two halves of the original problem and a constant time is spent in executing the if condition. Hence the equation for our recursive case will be T(n) = 2T(n/2) + c2. For a detailed explanation check the 'Exploration: Recurrence Relations' where we solved a similar problem.", "para_35": "We get the recurrence relation:", "para_36": "", "para_37": "Using the Master Method we can find the time complexity.", "para_38": "a = 2, b= 2, f(n) = c2\u00a0(constant)", "para_39": "It satisfies our case 1 where:  f(n) has a smaller order of growth than\u00a0 nlogba ", "para_40": "So, T(n) =\u00a0\u0398( nlogba) ", "para_41": "T(n) = \u0398 (n)", "para_42": "In this section, you saw how to implement a simple recursive function using the Divide and Conquer technique. In the next section, we will look at a couple of examples."}, "li_sentences": {"ul_0": ["Divide - In the first step we break the problem into smaller subproblems", "Conquer - This step involves solving the subproblems", "Combine - In the last step  we combine the solutions of the subproblems to get the solution for the larger problem"]}}}, "heading_sentences": ["Exploration 2", "3: Divide-and-Conquer Technique"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]]}, "preh2_links": {}}