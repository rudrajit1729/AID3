{"content": {"Introduction": {"para_sentences": {"para_0": "Recursion is a helpful algorithmic technique that would help us to solve specific kind of algorithm problems. In this section, we will see when to use recursion and how to write a recursive algorithm (MLO2).\u00a0 You might already have some idea about recursion, try to see if you can build the intuition of how to solve a problem using recursion.\u00a0\u00a0"}, "li_sentences": {}}, "Recursion": {"para_sentences": {"para_0": "When solving a problem, if you see that the problem can be solved by breaking the problem into smaller problems of the same form, then you can use recursion to solve it. For instance, take the problem of computing factorial. The factorial of a number n is given by:\u00a0", "para_1": "Factorialofn=n\u2217(n\u22121)\u2217(n\u22122)\u22c5\u22c5\u22c5\u22c5\u22c5\u22c5\u22c53\u22172\u22171", "para_2": "When we want to find the factorial of a number n (Factorial(n)), we can compute it easily if we have factorial of n-1, Factorial(n-1); which we can compute if we have factorial of (n-1)-1, Factorial(n-2), and so on. The figure below shows it diagrammatically.", "para_3": "", "para_4": "Note that we expressed Factorial function F in terms of itself. This is called a recurrence relation. A recurrence is an equation or inequality that describes a function in terms of its value on smaller inputs. Remember this word (recurrence relation), we will visit it again. Recurrence relations of recursive algorithms help us analyze the running time of an algorithm.\u00a0", "para_5": "Two important parameters to consider when writing recursive programs (this forms the template of recursion):", "para_6": "1. You must have a base case (the simplest form of the problem that you are attempting to solve and which can be answered directly)", "para_7": "2. You can break the problem into sub-problems that solves the smaller instances of the big problem and these sub-problems should ultimately lead to the base case.\u00a0", "para_8": "Our pseudocode for the factorial function can be:", "para_9": "You can watch the animation of the execution of recursion in the link provided by USFCA\n\n\nLinks to an external site.. Each recursive call is a frame that is put on the execution call stack.", "para_10": "The general strategy that you could follow to solve problems using recursion is to ask the following questions:", "para_11": "1. How can I reduce the problem into smaller versions of the same problem?", "para_12": "2. What is the base case?", "para_13": "3. Will I always reach the base case?", "para_14": "Let us look at one more example:", "para_15": "The Towers of Hanoi is a mathematical puzzle, where we have three pegs. The first peg has n number of disks of different sizes that can slide on any of the three pegs, but the condition is that we cannot place a larger disk on a smaller disk. The goal is to move all the disks from the first peg to the third peg, using the second peg as a temporary peg.", "para_16": "", "para_17": "Take a few minutes to think about how can we do it recursively. You can try it live at math is fun website\n\n\nLinks to an external site..", "para_18": "For the solution read the section '1.3 Tower of Hanoi' of Chapter 1 in the textbook by Jeff Erickson\n\n\nLinks to an external site..", "para_19": "To get the recurrence relation, T(n), for the Towers of Hanoi problem we need to find the time taken to move all the n disks.", "para_20": "To calculate the time taken to move n disks, we have to consider:", "para_21": "Combining these we get T(n) = T(n-1) + 1\u00a0 + T(n-1) for n >1", "para_22": "Obviously, the base case will be when n=1, i.e. when we have one disk. T(1) = 1", "para_23": "We can draw a tree to represent this recurrence relation, which represents the recursive calls made by the algorithm. To calculate T(n) we need to make calls to T(n-1) two times. To calculate T(n-1) we call T(n-2) two times. The tree looks like this:", "para_24": "", "para_25": "This tree is called a recursion tree (remember this term). It can be used to analyze the time complexity of an algorithm. We will see this in the future explorations.", "para_26": "In the below code editor try implementing The Towers of Hanoi problem. The solution is in solution.py in code editor files. Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..\u00a0", "para_27": "Your function definition:", "para_28": "The function returns: source, temp, target", "para_29": "sample input: hanoi(5, [5,4,3,2,1], [], [])output: [], [], [5, 4, 3, 2, 1]", "para_30": "Explanation: first peg is source, second peg is temp, third peg is target. The disks got moved from source to target.", "para_31": "", "para_32": "\u00a0"}, "li_sentences": {"ul_0": ["The time taken to move n-1 disks from the first peg to the second peg (this takes T(n-1) time)", "Then  the time taken to move the last disk to the third peg (this takes constant time as it is one move)", "Finally  the time taken to move the n-1 disks from the second peg to the third peg (this takes T(n-1) time)"]}}, "Exercises": {"para_sentences": {"para_0": "Example: input: x = 2,\u00a0 n = 9", "para_1": "Output: 512", "para_2": "Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..\u00a0", "para_3": "", "para_4": "\u00a0", "para_5": "Example:", "para_6": "isPalindrome(\"qwerty\") returns falseisPalindrome(\"Do geese see God\") returns True", "para_7": "\u00a0Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..", "para_8": "<iframe \" title=\"Recursion isPalindrome\" src=\"https://canvas.oregonstate.edu/courses/1914710/external_tools/retrieve?display=borderless&resource_link_lookup_uuid=cf1a8e34-e7c5-4614-b0ac-a2805a7e1dae\" allowfullscreen=\"allowfullscreen\" allow=\"geolocation *; microphone *; camera *; midi *; encrypted-media *; autoplay *; clipboard-write *; display-capture *\">", "para_9": "Example:", "para_10": "Input = 3; Output would be 3.", "para_11": "Explanation: There are three ways to climb to the top.# 1. 1 step + 1 step + 1 step# 2. 1 step + 2 steps# 3. 2 steps + 1 step", "para_12": "Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..\u00a0", "para_13": ""}, "li_sentences": {"ul_0": ["Using recursion implement the pow(x n) function  which calculates x raised to the power of n (i"], "ul_1": ["Write a recursive function\u00a0isPalindrome that accepts a string and returns true if it reads the same forwards and backwards"], "ul_2": ["You are climbing a staircase"]}}}, "heading_sentences": ["Exploration 2", "1: Recursion"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]], "ul_1": [[]], "ul_2": [[]]}, "preh2_links": {}}