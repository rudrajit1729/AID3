{"content": {"Introduction": {"para_sentences": {"para_0": "In this section, we see how to solve recurrence relations using the recursion-tree method ( MLO2 )."}, "li_sentences": {}}, "Recursion-Tree": {"para_sentences": {"para_0": "When a recursive algorithm makes more than a single call to itself, analysis can be done by constructing a tree of the recursive calls. It is just a visual representation of recursion where each node of the tree representing the cost of a certain recursive sub-problem. This tree is called a Recursion-Tree. Summing up the value of the nodes would give us the cost of the entire algorithm. This method is sometimes unreliable but it gives us good intuition and a guess for the time complexity. Accurate time complexity can be found by using the substitution method.", "para_1": "Problem 1:", "para_2": "Let us find the time complexity of the following recurrence relation that we have seen in previous explorations.", "para_3": "", "para_4": "Looking at the recurrence equation T(n) = 2T(n/2) + cn, we can say that when T(n) is executed it spends cn cost of execution for the current execution and then makes two recursive calls expressed by T(n/2). We can represent this in the tree form as:", "para_5": "", "para_6": "\u00a0From recurrence relation, we can find out the expansion of T(n/2). It can be written as T(n/2) = 2T(n/4) +c(n/2). This can be represented in tree form as:", "para_7": "", "para_8": "We can use this T(n/2) tree in T(n) tree, to build our recursion tree.", "para_9": "", "para_10": "Similarly, we can expand the tree by expanding T(n/4).", "para_11": "", "para_12": "Do you get an idea now? So, this way we can build our tree by expanding each recursive call until we reach the base case. We need not do that but that is the idea. So our tree would be:", "para_13": "", "para_14": "To find the cost of the whole tree, we will find the cost at each level. For this, we need to observe how many nodes are present at each level. At level 0, there is one node; at level 1 there are two nodes; at level 2 there are four nodes and so on. Do you see a pattern here? The nodes are increasing by a factor of two. (20, 21,22,23,...). This means at ith level there would be 2i nodes.", "para_15": "Calculating the cost at each level:\u00a0", "para_16": "At level 0: cn", "para_17": "At level 1: cn/2 + cn/2 = cn", "para_18": "At level 2: cn/4 + cn/4 +cn/4 + cn/4 = cn", "para_19": "We can find a pattern here as well, the cost at each level is always cn.", "para_20": "", "para_21": "So the cost of the total tree will be cn * number of levels in the tree. How many levels do we have? We can find this from the base case. We can see that", "para_22": "At level 0: tree expanded from T(n) T(n/20);\u00a0", "para_23": "At level 1: tree expanded from T(n/2) T(n/21);\u00a0", "para_24": "At level 2: tree expanded from T(n/4) T(n/22);\u00a0", "para_25": "At level 3: tree expanded from T(n/8) T(n/23);\u00a0", "para_26": "So, at level i: we can write T(1) to be an expansion of T(n/2i)", "para_27": "\u00a0Which gives us n/2i\u00a0= 1, from this we can solve for i, as we have seen before in the substitution method.", "para_28": "We will get, i = log2n", "para_29": "The total cost of the tree will be = cost at each level * number of levels.", "para_30": "\u00a0= cn * (i+1)", "para_31": "= cn * (log2n +1)", "para_32": "= cnlog2n + cn", "para_33": "So, the total cost of the recurrence relation is cnlog2n + cn, where c is some constant. Ignoring the lower order terms, the growth function of the algorithm represented by this recurrence relation is \u0398(nlogn).", "para_34": "Problem 2:", "para_35": "The below video explains the solution for the recurrence relation:", "para_36": "T(n) = 3T(n/2) + cn", "para_37": "Assume base case: T(1) = 1", "para_38": "You can attempt the solution based on the steps that we have seen. Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_39": " \u00a0 ", "para_40": "Question: Solve for the growth function of recurrence relation. Try it out yourself before looking at the solution.", "para_41": "T(n) = T(n/4) + T(n/2) + n2"}, "li_sentences": {}}, "Exercises": {"para_sentences": {}, "li_sentences": {}}}, "heading_sentences": ["Exploration 2", "2", "2: Recursion-Tree method"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {}, "preh2_links": {}}