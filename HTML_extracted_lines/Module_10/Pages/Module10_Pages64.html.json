{"content": {"Creating objects of one class inside another class' method": {"para_sentences": {"para_0": "So far we've defined a lot of classes and created a lot of objects of those classes. You may have noticed that we can create a new object wherever that class is available, even inside a method of another class.", "para_1": "Let's look at an example:", "para_2": "", "para_3": "Here, inside the ClubAssociation class, the method add_new_club() creates an object of the Club class every time it is called. This Club object is available as new_club_object and then it's added to the data member recognized_clubs of the ClubAssociation object. Thus the recognized_clubs data member will then contains multiple Club objects.", "para_4": "What would happen if we commented out line 22, which adds the new_club_object to the recognized_clubs list?", "para_5": "The variable new_club_object is a local variable and its lifetime is only as long as the add_new_club() method is being executed. So every time the add_new_club() method is called, the object is created and then as soon as the method ends it disappears, never to be found again. So if we don't want to lose our Club objects, we need to make sure they are stored inside a data member, because data members exist as long as the object they belong to exists.", "para_6": "So as long as an ClubAssociation object exists, its recognized_clubs data member will exist even if no method call is being executed on the ClubAssociation class object. And thus all the contents of the data member will continue to exist.", "para_7": "Can you create another ClubAssociation object (perhaps for your local city) and add a club to it by calling the add_club method on this ClubAssociation object? What would that look like?"}, "li_sentences": {}}, "Summary and Syntax": {"para_sentences": {"para_0": "To summarize, you can use objects of the same class or another class inside a method. A method can accept an object of any class as a parameter in the same way it would it accept integer or string parameters. As you will recall from the previous exploration on passing objects as parameters, when an object is received as a parameter we can call methods or access data members of that object. By default a method will always have a self\u00a0parameter and self will reference the object on which the method was called. When a method takes an object as a parameter, you can call methods on it that are defined for that class."}, "li_sentences": {}}, "Where to use in real life?": {"para_sentences": {"para_0": "It's useful if you write a library with multiple classes and want to control the creation of objects of some classes. For example, imagine a Library class that will assign an internal barcode to each book when creating a Book object and only the Library class is aware of how to generate the barcode."}, "li_sentences": {}}, "Using objects of one class inside another class' method": {"para_sentences": {"para_0": "Once an object has been created, you can access its methods. Let's look at an example of that when a method has created an object of another class.", "para_1": "Here, we have a slightly modified version of the Club and ClubAssociation classes where now the Club class has a new data member called virtual_meetings that has the value True if a club holds virtual meetings and False otherwise.", "para_2": "Take a careful look at lines 42-44, where the add_new_club() method is called, and then at lines 20-26, where that method is defined. That method creates a new Club object and then appends it to the list of recognized clubs.", "para_3": "", "para_4": "Inside the list_available_clubs() method, we iterate through the recognized_clubs data member using a for loop and call the get_title and get_theme method available on the stored Club class objects to get the the title and theme of each Club object and then print it.", "para_5": "Then on lines 35 and 36, we call another method called meets_virtually() of the Club object to ensure a message is printed if that club has virtual meetings. Taking a careful look at line 35, you will see that not only do we call a method of the Club object, we also use the value returned by that method in an if conditional to decide whether to print the message.", "para_6": "What would happen if we removed the pair of parentheses on line 35 after the method name in the if conditional? And what happens if we remove the pair of parentheses on line 34?"}, "li_sentences": {}}, "Using another object of the same class inside a method of the same class": {"para_sentences": {"para_0": "A class can also have methods that take objects of that same class as parameters.", "para_1": "Let's look at an example using the same Club class with a new method :", "para_2": "", "para_3": "\u00a0", "para_4": "In the method meet_with_other_club on line 16, we see that the method accepts one parameter, another_club. (Of course, we also have the self parameter that is automatically passed by Python when the method is called.) Do you remember what self refers to? It's the object on which the method was called. So when line 34 is executed and Python starts executing the method, self will refer to club1 and for the call on line 35, self will refer to club2.", "para_5": "We can see how this method is called on lines 34 and 35 where another club object is passed as a parameter. This is the normal syntax for calling a method. The only difference is the parameter is a user-defined object instead of a string, integer, etc.", "para_6": "Inside the meet_with_other_club method, we use both parameters, self and another_club. Both are objects of the Club class, so when using these objects we can call methods of the Club class.", "para_7": "In the if/elif statements on lines 20 through 25, we call the meets_virtually method and use the value returned by the method to determine whether the given club (self or another_club) meets virtually or not. How does Python know which Club object to call the meets_virtually method on?\u00a0 Again, because of the syntax of calling a method.", "para_8": "For example, after the call from line 34, when Python encounters line 20, the meets_virtually method is first called on club1 and then on club3 because inside the if conditional on line 20, we have the call self.meets_virtually first and then another_club.meets_virtually. ", "para_9": "You can see a visualization of the entire program here\n\n\nLinks to an external site.. Click \"Next\" to see the step-by-step visualization. Look carefully at the blue frame in the right hand side and where the arrows are pointing. Note that the arrows may look like they are pointing at a data member but they are actually pointing at the entire Club object."}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Debug and fix this piece of code so that it can print each book's title, author and a message if an ebook is available.", "para_2": "", "para_3": "\u00a0", "para_4": "2. Debug and fix this code so that ingredients can be added and removed from the ingredients data member, which is a dictionary.", "para_5": "", "para_6": "3. Debug and fix the code so that line 88 prints ['Bhel','Salsa'] and line 89 prints ['Salsa']", "para_7": "", "para_8": "4. Debug and fix the code so that Line 41 works correctly as described in the comment.", "para_9": "", "para_10": "5. Debug and fix this code so that the line 25 works correctly as described in the comment.", "para_11": "", "para_12": "6. Complete all the TODO items described in the comments in the code.", "para_13": "", "para_14": "\u00a0"}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Creating and using objects of one class inside another class"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"para_0": [0, 0, 0, 0, 0, 0, 0], "para_1": [0, 0, 0, 0, 0], "para_2": [0, 0, 0, 0, 0], "para_3": [0, 0, 0, 0, 0], "para_4": [0, 0, 0, 0], "para_5": [0, 0, 0, 0], "para_6": [0, 0, 0, 0], "para_7": [0, 0, 0], "para_8": [0, 0], "para_9": [0, 0], "para_10": [0], "para_11": [0], "para_12": [0], "para_13": [0], "para_14": [0]}, "preh2_links": {}}