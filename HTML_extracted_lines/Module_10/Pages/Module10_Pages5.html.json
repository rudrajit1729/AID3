{"content": {"Introduction": {"para_sentences": {"para_0": "How do you get from a set of requirements to a working program? There is no cut-and-dried recipe to follow. If there were, someone would write an app for it, and programmers would be out of a job. It can be tempting to just sit down at the keyboard and start typing out code, and that might even work okay for tiny simple problems, but for anything else, it can easily get you into a time-wasting morass of errors that you're not sure how to fix. To help you avoid that outcome, here are some general principles you can follow to help guide you toward a solution:", "para_1": "You may not find all of these steps useful (or at least not have to think about them consciously) for very small programs, but you should definitely keep them in mind for when you get to problems whose solutions are less obvious."}, "li_sentences": {"ol_0": ["Understand the requirements", "Design tests", "Outline your approach", "Translate your plan into code", "Run your tests", "Debug your code", "Reflect on your process"]}}, "Understand the requirements": {"para_sentences": {"para_0": "In real life this is sometimes the most challenging part, since sometimes your clients themselves won't have a super clear idea of exactly what they want, but for the assignments I give you all the requirements. However you may find it useful to go through the assignment specifications and put them in the form of a checklist. You may also think of something I haven't considered, in which case you should ask me for clarification."}, "li_sentences": {}}, "Design tests": {"para_sentences": {"para_0": "It's important to come up with test cases that are representative of how your code could be used. You want them to be good enough that if your code passes all your tests, you will feel confident that it correctly meets all of the requirements. It's also important that for each test, you decide what result(s) you expect from that test. If you don't do that ahead of time, then it can be easy to run a test, briefly look at the output, and convince yourself that it looks reasonable.", "para_1": "How do you know what cases to test?", "para_2": "It's always better for you to find cases that break your code than for a customer (or employer) to do so."}, "li_sentences": {"ul_0": ["Special cases: for example if your program should compute the factorial of a number  the normal rule is that you take the product of all integers from 1 to that number  but zero is a special case  since the factorial of zero is 1  so zero should definitely be one of the test cases", "Boundary values: for example if a customer gets a special discount when they order 10 or more items  then you should check the numbers on both sides of that boundary (9 and 10) to make sure they're handled correctly", "Path coverage: you should have test cases that check different possible paths through your logic  to make sure the different paths give correct results", "Edge cases: extreme or unusual cases that might expose problems", "Unit tests: when your solution consists of multiple parts that each solve a piece of the problem  it's good to test each part separately  since it's easier to debug a small part at a time", "Integration tests: once you're satisfied that the different parts work correctly on their own  you need to make sure they work correctly together"]}}, "Outline your approach": {"para_sentences": {"para_0": "You will want come up with an outline of the steps your code will need to take to meet the requirements. Two useful strategies to help with this are stepwise refinement and working through examples of the problem by hand.", "para_1": "One of the most common methods for outlining your problem-solving approach is stepwise refinement. This is a process of breaking up the original problem into some number of smaller sub-problems. Next, you take each sub-problem and break it up into even smaller sub-problems. This is repeated until you get a list of steps that are detailed enough to be translated into code. This list of steps is often referred to as pseudocode.", "para_2": "As an example of stepwise refinement, consider the problem of wanting to paint your house, which is a big job. It might seem overwhelming at first, but you can break that top-level task into the following sub-tasks:", "para_3": "Those sub-tasks can in turn be broken down further:", "para_4": "This process continues until you've defined everything to a level of detail where you feel comfortable that you know every small step that needs to happen.", "para_5": "Brains are pretty smart (most of the time). They know how to do lots of stuff without us really being conscious of the steps we're going through to make that stuff happen. In this method, you solve multiple examples of the problem yourself with pencil and paper, paying close attention to each tiny step. Doing this will often help you notice the pattern(s) in how you solve different examples of that problem. This strategy can be used together with stepwise refinement, to help you figure out what the sub-tasks should be."}, "li_sentences": {"ul_0": ["buy paint", "paint house", "clean up"], "ul_1": ["buy paint", "choose colors", "choose brand of paint", "paint house", "tape over parts that shouldn't get painted", "purchase/borrow supplies (ladders  rollers  etc", "bribe friends with pizza", "schedule a day/time", "actually paint the house", "clean up", "return/put away supplies", "un-tape the taped bits", "finish any fine detail work"]}}, "Translate your outline into code": {"para_sentences": {"para_0": "Take the outline (or pseudocode) you've created and translate each small sub-task into code, but don't do it all at once (unless it's a tiny program). Instead, you should produce a short section of code and then try running it to see if that part does what you expect. If it does, then you can add another short section and run it again, until you've translated your whole outline. If you avoid making lots of changes at once, it's easier to track down any new bugs that pop up."}, "li_sentences": {}}, "Run your tests": {"para_sentences": {"para_0": "How do you know if your code does what you expect? By running the tests you designed back in step #2. If you've thought of more tests while coding, add those in. The more testing you do, the more bugs you'll catch."}, "li_sentences": {}}, "Debug your code": {"para_sentences": {"para_0": "What if your code doesn't do what you expect? Well then you need to find the problem and fix it. Fortunately, since you're only making a few changes to your code at a time, that means any new problem is almost certainly among those few changes. Often error messages will also give you information about what the problem is and where it occurred. If you don't see the problem at first, try to methodically narrow down where it could be. After making corrections, re-run your tests to make sure that part works now, and that you haven't accidentally broken anything else."}, "li_sentences": {}}, "Reflect on your process": {"para_sentences": {"para_0": "Reflecting on your problem solving process can help you fine tune it to work better next time. What did you learn about the problem as you went? What tests didn't work out the way you expected? What alterations did you have to make to your program due to failed tests? How could your planned tests have been more complete? What was missing or needed to be altered from your initial design, and why? What problems did you encounter during implementation? How were you able to solve those problems? What outside sources (sites, books, or other materials) did you find helpful? How can you generalize any parts of your problem solving experience in a way that might help you on future assignments?"}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Problem Solving"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ol_0": [[]], "ul_0": [[]], "ul_1": [[]]}, "preh2_links": {}}