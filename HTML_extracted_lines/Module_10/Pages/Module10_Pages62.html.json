{"content": {"The __init__ method (initializer method)": {"para_sentences": {"para_0": "As you may recall from previous modules, the init method is automatically called by Python, only once, when you are creating an object of a class. The purpose of the code in the initializer method is to give initial values to the class data members (which can be modified later by other methods of the class). So it's like a launchpad for any object of that class.", "para_1": "An init method doesn't need to take a parameter for every data member. If a certain data member will always be initialized with the same value, you don't need a parameter to initialize it with. Let's look at some examples.", "para_2": "\u00a0", "para_3": "", "para_4": "\u00a0", "para_5": "Here we have a class NonCustomizableRobot with an init method that doesn't take any parameters. As can be seen on line 2 and when we create objects of that class on lines 23 and 24,\u00a0 we don't pass any parameters when creating objects of the class. ", "para_6": "And we have another class called CustomizableRobot with an init method that accepts 3 parameters - sensors, actuators and name. As can be seen on line 12 and then when we create objects of that class on lines 31 and 36, we pass parameters when creating objects of the class. However, the state and operating_system data members are always initialized to the same values (lines 19 and 20), so no parameters are needed to initialize them with.", "para_7": "Can you change the init method for CustomizableRobot\u00a0to\u00a0 accept a value for the parameter operating_system and then use that to initialize the operating_system data member? ", "para_8": "To make this change effective, which lines would you need to modify to make the program run successfully and what would those changed lines look like ?", "para_9": "\u00a0"}, "li_sentences": {}}, "What is self?": {"para_sentences": {"para_0": "self is a reference to the object currently being initialized. It's like the pronoun \"I\" in English which can be used by every person in a conversation but it still refers to the person currently speaking. Using self allows us to write code that is executed for all objects of a class without having to figure out the names of the objects that anyone would create. ", "para_1": "self also provides anyone reading the code an easy way to distinguish between data members and local variable names (including parameters). Inside the initializers in the above example, we are using the same variable names for the data members and the parameters but Python knows that we are assigning the values from the parameters to the data members and not vice versa because the data members will always have a self. prefix while any local variables will not.", "para_2": "When Python is executing the code to create an object, it automatically creates a self reference to point to the object being created. You can see the changing references to self in this visualization\n\n\nLinks to an external site. as the objects are being initialized.\u00a0", "para_3": "Python requires that all methods of a class have self as their first parameter. And whenever we want to write code that uses a data member, Python also requires that we prefix the data member's name with \"self.\" (Note the \".\" after the self).", "para_4": "Try removing self from Line 2 and running the code. Now put it back and try removing it for the init method of CustomizableRobot and running the code. What do you notice? What happens if you remove it from any of the lines where the data members are being initialized?", "para_5": "You might notice that even though we don't pass any parameters to the init method for NonCustomizableRobot, we still write a pair of empty parentheses after the class name when creating objects of that class (lines 23 and 24). What happens if we remove that empty pair of parentheses?", "para_6": ""}, "li_sentences": {}}, "Summary and Syntax": {"para_sentences": {"para_0": "To summarize, the init method, which is called automatically by Python when creating an object, always needs a self parameter in its definition. Apart from self a method can take more parameters but doesn't have to.", "para_1": "When creating an object of a class with an initializer that accepts parameters, the syntax is:", "para_2": "For a class with an initializer that does not accept any parameter, the syntax for creating an object of that class is:", "para_3": "\u00a0"}, "li_sentences": {}}, "Real Life Usage": {"para_sentences": {"para_0": "Almost every class you write should have an init method unless you have a very good reason not to. You can use all or some of the parameters passed to the init method to initialize the data members for that object. Data members can also be initialized without having a corresponding parameter for\u00a0 them. ", "para_1": "The design of your init method depends on what your customer/team/the assignment text says.", "para_2": "The self reference object allows you to change the data members of an object and have those changes persist across calls to different methods. It also allows us to call one method from inside another."}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Replace the word BLANK with the right \u00a0character or word and make this code work successfully.", "para_2": "", "para_3": "\u00a0", "para_4": "2. Debug and fix this program to make it work successfully.", "para_5": "", "para_6": "\u00a0", "para_7": "3. Write code for a CookingBot and a Recipe class that are supposed to work as follows.", "para_8": "The CookingBot class has two data members: currently_cooking which should be initialized to None and cuisine_mode to whatever the user chooses when creating an object of this class.", "para_9": "The initializer should only accept a parameter to initialize the cuisine_mode data member. It should print a message saying \"Initializing CookingBot object to cuisine_mode\" where you print the actual value of the cuisine_mode data member.", "para_10": "The Recipe class has 3 data members: recipe_id which is an integer, recipe_name which is a string, and ingredients which is a dictionary where the keys are ingredient names and values are the quantity. When creating a Recipe object, the initializer should accept parameters and initialize all the data members.", "para_11": "Your program should work with the following test code:", "para_12": "\u00a0"}, "li_sentences": {}}}, "heading_sentences": ["Exploration: The init method and self"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"para_0": [0, 0, 0, 0, 0], "para_1": [0, 0, 0, 0, 0], "para_2": [0, 0, 0, 0, 0], "para_3": [0, 0, 0, 0], "para_4": [0, 0, 0], "para_5": [0, 0, 0], "para_6": [0, 0, 0], "para_7": [0, 0], "para_8": [0, 0], "para_9": [0, 0], "para_10": [0], "para_11": [0], "para_12": [0]}, "preh2_links": {}}