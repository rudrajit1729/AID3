{"content": {"Introduction": {"para_sentences": {"para_0": "You're probably familiar with the concept of sets from math classes. A set is an unordered collection of elements where every element is unique. Adding a duplicate element doesn't change a set. Non-duplicate elements can be added to a set - sets are mutable. However, the elements in a set must be immutable, so a set cannot contain lists or dictionaries or sets. Sets can contain values of different types, or be empty.", "para_1": "", "para_2": "some_elements contains an int, a string, a float, a bool, and a tuple - all of which are immutable types.", "para_3": "You can create a set containing 1,2, and 3 in two ways. The first is to use the curly brace notation. The second is to use the set() function to convert a tuple or list with those elements into a set. The argument for the set function must be an iterable (for example a list or tuple), or for an empty set, no argument - just empty parentheses.", "para_4": "However, to create a new empty set, you must use the second syntax, since Python will interpret an empty pair of curly braces as an empty dictionary, not an empty set.", "para_5": "You cannot index or slice sets.", "para_6": "You can use in and not in to check whether a value is in the set:", "para_7": "You can add elements to a set or remove elements from a set:", "para_8": "If you add an element that is already in the set, nothing happens.", "para_9": "The len function tells you how many elements are in a set:", "para_10": "The clear method empties a set:", "para_11": "Python has operators for performing various set operations. The most common set operations are union, intersection, difference, and symmetric difference. Each of these operations produces a new set and leaves the original sets unchanged.", "para_12": "", "para_13": "The intersection of two sets is a new set that contains every element that is in both sets.", "para_14": "", "para_15": "The union of two sets is a new set that contains every element that is in either set.", "para_16": "", "para_17": "The difference of two sets is a new set that contains every element that is in the first set except for the elements that are also in the second set. This operation is not symmetric.", "para_18": "", "para_19": "The symmetric difference of two sets is a new set that contains every element that is in either set except the elements that are in both sets. This is the same as the union minus the intersection.", "para_20": "", "para_21": "We can iterate through a set with a for loop:", "para_22": "How do you know when to use a list and when to use a set?", "para_23": "A set comprehension looks just like a list comprehension except it uses curly braces instead of square brackets. \u00a0For example, if you have a list of names that possibly contains duplicates, and you would like to filter out any names that aren't palindromes (ignoring case) and get rid of duplicates at the same time, you could create a set like so:", "para_24": "\u00a0Checking for equality to the reverse slice checks for palindromes. Using lower() takes care of ignoring case. \u00a0The curly braces mean it creates a set, which will automatically exclude any duplicates."}, "li_sentences": {"ol_0": ["A set cannot contain duplicate elements  but a list can", "A set can only contain values that are immutable  but lists can contain mutable values", "A list is ordered - you can know that its elements will be traversed or printed out in a particular order", "Checking whether a certain value is in a list takes time proportional to the length of the list  but doing so in a set is very fast  regardless of the size of the set"]}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Write your own function called \"unionize\" for finding the union of two sets. Your function should take as parameters two sets, and return a new set that is the union of those two sets. Do not use Python's built-in union functionality.", "para_2": "2. Write your own function called \"intersect\" for finding the intersection of two sets. Your function should take as parameters two sets, and return a new set that is the intersection of those two sets. Do not use Python's built-in intersection functionality.", "para_3": "3. Write your own function called \"sym_diff\" for finding the symmetric difference of two sets.\u00a0 Your function should take as parameters two sets, and return a new set that is the symmetric difference of those two sets.\u00a0 Do not use Python's built-in symmetric difference functionality."}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Sets"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ol_0": [[]]}, "preh2_links": {}}