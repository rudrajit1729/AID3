{"content": {"Passing objects as arguments to methods\u00a0": {"para_sentences": {"para_0": "Objects can be passed as arguments to a method. We know this because everything in Python is an object - ints, floats, Booleans, strings, lists, dictionaries, etc. However, we can also pass objects of user-defined classes as arguments. Let's look at an example.", "para_1": "", "para_2": "In the code above, we define a Robot class and a Sensor class. And on lines 36 through 40 we create a Robot object and multiple Sensor objects.\u00a0", "para_3": "The Robot class has a method install_sensor that can accept a sensor object and then adds it to the sensors data member, defined on line 15 as a list.\u00a0 Since sensors is a list, we can call the append method on it to add anything to the list. Thus, on line 27 we are adding the sensor_object parameter to the sensors data member. If the sensors data member were a dictionary instead, adding more sensors would be different, since adding to a dictionary is different than adding to a list.\u00a0", "para_4": "And if you look at the output of the program you will notice the output is similar to", "para_5": "As you might recall, that's because for objects of a user-defined class, Python doesn't know what information about the object it should print. Therefore it prints the most basic information i.e. the name of the class and the memory address where the object is.\u00a0", "para_6": "Once the sensor_object is received as a parameter inside the install_sensor method, it's a reference to the original sensor_object and not a copy of it. And this reference allows us to access all the methods and data members that are available on the sensor_object. You can look at this visualization\n\n\nLinks to an external site. to see what's happening.", "para_7": "So if you want to print the name of a Sensor object, you can call the get_name method as on line 45. Now can you modify the line 26 to do the same thing inside the install_sensor method of the CustomizableRobot class, to print the name of the sensor which is being passed to the method?", "para_8": "\u00a0", "para_9": "Can you implement the remove_sensor method in the above program to remove a passed sensor_object from the list of sensors and print a message after the object is removed? Uncomment the line 48 to test your code. What would the remove_sensor method look like after the changes?", "para_10": "\u00a0"}, "li_sentences": {}}, "Summary and Syntax": {"para_sentences": {"para_0": "To summarize, an object can be passed to a method like any other kind of variable by having a parameter for it in the method definition:", "para_1": "And it can be passed to a method in a function call like any other kind of variable:", "para_2": "When a method receives an object as a parameter, the parameter is a reference to the original object and using the parameter, you can access all the data members and call the methods of the object that was passed.", "para_3": "Note that any changes you make to the object inside the method will persist outside the method as well.", "para_4": "Another important thing to note is that although you can access data members of an object passed as a parameter, you should not access private data members (i.e. those with an underscore as a prefix) of a passed object. Instead call the corresponding get_ method like how we called get_name above to access the private data member _name, in the above code examples."}, "li_sentences": {}}, "Why pass the whole object?": {"para_sentences": {"para_0": "You might remember that information hiding is an important part of OOP (object-oriented programming). If the code that is calling the function doesn't itself need access to the object's data members, then it shouldn't get them from the object just in order to pass them to a function. That code should instead just pass the object and let the function ask the object for whatever it needs from it. This doesn't require any additional memory because you're not making a copy of the object for the function - you're just sharing with the function the location in memory where the object is stored (which is how all argument passing in Python works).", "para_1": "\u00a0"}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Change the code below to implement the following changes:", "para_2": "Add an Actuator class with an __init__ method that accepts a parameter called name and initializes a data member called name. Add a method called install_actuator to the CustomizableRobot class that accepts a parameter called actuator_object and adds it to actuator data member in the CustomizableRobot class.", "para_3": "", "para_4": "\u00a0", "para_5": "2.\u00a0 Replace the word BLANK with the right character/word and make this code work.", "para_6": "", "para_7": "\u00a0", "para_8": "3.\u00a0 Implement the following from scratch", "para_9": "Write code for a CookingBot and a Recipe class that should work as follows.", "para_10": "The CookingBot class has one data member: currently_cooking which should be initialized to an empty dictionary inside the __init__ method. It would later on contain data which looks like {recipe_id: Recipe_object}", "para_11": "The CookingBot class has a method called set_current_cooking which accepts a Recipe object as a parameter and adds it to the currently_cooking dictionary such that the key is the recipe_id and the value is the Recipe object and it prints a message which looks like this:", "para_12": "\"Currently cooking <recipe_name>\"", "para_13": "The Recipe class has 2 data members: recipe_id which is an integer and recipe_name which is a string.\u00a0 When creating a Recipe object, the initializer should accept 2 parameters and initialize all the data members. The Recipe class should also have corresponding get_name and get_id methods."}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Passing objects as arguments to methods"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"para_0": [0, 0, 0, 0], "para_1": [0, 0, 0, 0], "para_2": [0, 0, 0], "para_3": [0, 0, 0], "para_4": [0, 0, 0], "para_5": [0, 0], "para_6": [0, 0], "para_7": [0, 0], "para_8": [0, 0], "para_9": [0, 0], "para_10": [0, 0], "para_11": [0], "para_12": [0], "para_13": [0]}, "preh2_links": {}}