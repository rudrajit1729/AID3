{"content": {"Variables & Assignment Statements": {"para_sentences": {"para_0": "A variable is a name that refers to a particular value. It's called a variable because the value it refers to can change. An assignment statement assigns a value to a variable. If a variable of that name doesn't yet exist, then one is created. Assignment statements look like this:", "para_1": "Each of these statements causes the variable on the left side to refer to the value on the right side. It's also possible to have a variable on the right side of an assignment statement, in which case the variable on the left side will now refer to the same value as the variable on the right side. After the statement below, num_1 and num_2 will both refer to the value 12.", "para_2": "You can print the value that a variable refers to like so:", "para_3": "Variable names should be descriptive of their purpose to enhance the readability of your code. They must start with a letter or an underscore - subsequent characters can be numbers, letters or underscores. Variable names are case sensitive - radius, Radius, raDius, etc. would be interpreted as different variables. A variable name cannot be the same as a keyword. Python 3 has the following keywords:", "para_4": "In some computer languages, you cannot change what type of value a variable refers to, but in Python you can. For example, you can assign an integer to a variable and then later assign a string to that same variable. You can use the type function to see what type of value a variable currently refers to.", "para_5": "Literal values like 212, or -17.8, or \"Wichita\", or True, are often referred to simply as literals.", "para_6": "If there are literal values that appear in your code, it can be a good idea to replace them with constants. In Python, a constant behaves just like a variable does, but by convention, the name of a constant is in all caps, for example MAX_CAPACITY or EARTH_GRAVITY. A constant is assigned a value once and then that value should never change during the program's execution. Python doesn't enforce this, because it has a philosophy of \"we're all adults here\", so you could change the value of a constant, but just don't. Declaring a constant gives a name to a literal value, making it easier to recognize or remember the value's purpose, so that you don't have \"magic numbers\" in your code.", "para_7": "Examples:", "para_8": "Something that often comes up for the output of a program is printing out specific text, but with the values of certain variables or constants filled in. There are a few different ways of doing this in Python. Here's one example:", "para_9": "In this print statement the two strings are separated from the variable by commas, and each of the commas will cause a space in the output (but the spaces that aren't part of the strings will not cause spaces in the output). Here's an example that uses string concatenation, which will be mentioned in the next exploration:", "para_10": "In this print statement the value of dog_age is converted to a string, and the strings are then joined with the + operator. In this version, a space was added at the end of the first string and the beginning of the last string, since there are no commas causing spaces in the output. Here's one more example, using something called an f-string (because of the 'f' at the beginning):", "para_11": "In this print statement there's just a single string, and the values of any variables in curly braces are filled in.", "para_12": "All three of these approaches will work, so feel free to use any of them."}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Assign the value 3.14159 to a variable named pi, and then print out the value of that variable.", "para_2": "2. Assign the value \"Smith\" to a variable named last_name, and then print out the value of that variable.", "para_3": "3. Assign the value 19.3 to a variable named length_in_inches, and then print out the type of the value that variable refers to.", "para_4": "4. Assign the value \"haberdashery\" to a variable named occupation, and the print out the type of the value that variable refers to."}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Variables & Assignment"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"para_0": [0, 0], "para_1": [0, 0], "para_2": [0, 0], "para_3": [0, 0], "para_4": [0, 0], "para_5": [0], "para_6": [0], "para_7": [0], "para_8": [0], "para_9": [0], "para_10": [0], "para_11": [0], "para_12": [0]}, "preh2_links": {}}