{"content": {"Iteration": {"para_sentences": {"para_0": "While loops and for loops enable us to make certain sections of code repeat multiple times.", "para_1": "A while loop continues iterating as long as its condition remains true. Here's an example:", "para_2": "", "para_3": "The loop will first test the condition. If it's true, then the code in the loop is executed. It will continue testing the condition and executing the loop until the condition is false, at which point we drop out of the loop and execution resumes with whatever code comes after it. It's important that something in the loop will eventually cause the loop condition to become false. Otherwise the loop will continue forever, which is known as an infinite loop. If you run the Repl below, it will continue to run until you hit the square stop button.", "para_4": "", "para_5": "As with if statements, a loop can contain as many statements as needed, with indentation determining how statements are grouped together.", "para_6": "A for loop traverses a sequence (or iterable type), looping once for each element in the sequence. A loop variable takes on the value of the current element, which can then be used inside the loop. So far, strings are the only iterable type we've looked at - we'll see one more on this page and others later. Here's an example of iterating through a string:", "para_7": "", "para_8": "The first time through the loop, letter equals \"a\", next time through it equals \"p\", next \"o\", and so on until the last time through, when it equals \"y\".", "para_9": "If we need a for loop to iterate over some increasing (or decreasing) sequence of integers, we can achieve that by using a range. Ranges are another iterable type. Here's an example that counts from 1 to 10:", "para_10": "Notice that the range goes from 1 up to, but not including, 11. A range can also count by a given step size:", "para_11": "You can count down by using a negative step size, but if you do, then the first number (the start of the range) needs to be greater than the second number (the end of the range):", "para_12": "A loop can be terminated early with the \"break\" keyword. For example:", "para_13": "", "para_14": "This loop only prints the numbers up to 4 because when the \"break\" is executed, it immediately drops us out of the loop.", "para_15": "The \"continue\" keyword allows us to skip iterations of a loop. For example, try replacing the word \"break\" with \"continue\" in line 3 of Repl above. With that change, it prints the numbers from 1 through 10 except for 5, because it skips that iteration, jumping us to the next iteration of the loop.", "para_16": "There may be occasions where using \"break\" is justified, but you should try to write your loop conditions such that \"break\" is not needed, since that usually makes the behavior of your loop simpler to read.", "para_17": "\u00a0", "para_18": "Both while loops and for loops can be nested. You can also have if statements inside loops or loops inside if statements. You can have an if statement inside a for loop inside a while loop inside another if statement if you want to.", "para_19": ""}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Write code that reads an integer from the user and prints out the sum of the integers from 1 to that number.", "para_2": "2. Write code that reads a string from the user, counts how many characters are in the string, and prints out \"odd\" if that number is odd, but prints \"even\" if that number is even.", "para_3": "3. Write code that continues reading a string from the user and printing it out until the user enters \"quit\"."}, "li_sentences": {}}}, "heading_sentences": ["Exploration: While loops and for loops"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"para_0": [0, 0], "para_1": [0, 0], "para_2": [0, 0], "para_3": [0, 0], "para_4": [0], "para_5": [0], "para_6": [0], "para_7": [0], "para_8": [0], "para_9": [0], "para_10": [0], "para_11": [0], "para_12": [0], "para_13": [0], "para_14": [0], "para_15": [0], "para_16": [0], "para_17": [0], "para_18": [0], "para_19": [0]}, "preh2_links": {}}