{"content": {"Introduction": {"para_sentences": {"para_0": "A list is an ordered collection of objects of any type. You can have lists of floats, strings, objects made from classes you've defined, etc. You can even have lists contain other lists. You're allowed to mix the types of objects in a list, for example you can have a list that contains both integers and strings.", "para_1": "Most lists contain multiple values, but we can have lists of one or zero values, which can be useful. Here are a few lists for you to interact with.", "para_2": ""}, "li_sentences": {}}, "len": {"para_sentences": {"para_0": "With lists, len() returns the number of elements in the list:"}, "li_sentences": {}}, "Indexing and slicing": {"para_sentences": {"para_0": "Indexing and slicing work the same with lists as they do with strings. For example, try entering these commands by typing them to the right of the little red arrow above. (Enter one line at a time.)", "para_1": "When you index into a nested list to get a sublist, you can then index into that list. Try entering the following to get the list within some_stuff, then the item 'Tollbooth' within that sublist, and then its first character:"}, "li_sentences": {}}, "in, not in": {"para_sentences": {"para_0": "Also like strings, we can use in and not in. With these two operators, the second operand can be of any iterable type, which includes both strings and lists, and the first operand can be of any type at all, including iterable types. Try these examples to see for yourself:", "para_1": "What happened with those last two examples? The string \"Phantom\" is not in some_stuff - it's in a list that's in some_stuff. That list is at index 3, so we were able to find it there.", "para_2": "Let's look at some more things we can do, with new list examples.", "para_3": ""}, "li_sentences": {}}, "Min and max, sort, sorted": {"para_sentences": {"para_0": "There are min and max functions we can use. Try these:", "para_1": "The min and max functions wouldn't make sense for things like some_stuff in the first set of list examples, since Python doesn't know how to compare the different types in that list. There's also a sort function we can use.", "para_2": "You'll notice that nothing prints out when you try those. But now look at the lists again:", "para_3": "The sort function also wouldn't make sense for some_stuff - again because Python doesn't know how to compare the different types in that list. (Try it and see!)", "para_4": "There's also a function called sorted(). Unlike the sort() method, the sorted() function returns a sorted copy without changing the original list:"}, "li_sentences": {}}, "Concatenation": {"para_sentences": {"para_0": "We can concatenate lists with the + operator.", "para_1": "Here's one more list example for us to practice on.", "para_2": ""}, "li_sentences": {}}, "Iterating through a list": {"para_sentences": {"para_0": "Lists are iterable, so we can use a for loop to access each element. For example, try this loop (you'll have to use the tab key after you hit enter. You'll see 3 dots , which means it will wait for you to press enter again before executing your code).", "para_1": "The following loop prints out the total of the values in the list:"}, "li_sentences": {}}, "Splitting a string": {"para_sentences": {"para_0": "You can split a string into a list of tokens using the string split() method. For example:", "para_1": "word_list is now this list: [\"Not\", \"the\", \"comfy\", \"chair!\"]. The default is that white space (spaces, tabs, and newlines) is the separator, but you can specify other separators:", "para_2": "Now word_list is: [\"The cat\", \"a stray tabby\", \"climbed in the window\", \"tail twitching.\"]"}, "li_sentences": {}}, "Lists of objects": {"para_sentences": {"para_0": "We can make a list of BankAccount objects (which we defined in Module 5) like this:", "para_1": "What if we want to access the balance of the first account in the list? \u00a0We can do that like this:", "para_2": "Where \"account_list[0]\" gives us a BankAccount object and \".get_balance()\" returns the balance of that object."}, "li_sentences": {}}, "List comprehensions": {"para_sentences": {"para_0": "List comprehensions are a concise way to construct a new list by applying some transformation to an existing list (or other iterable type). For example, the following code creates a new list whose elements are double the elements in fun_floats:", "para_1": "Here's a similar example that works from a range instead of a list:", "para_2": "We can optionally filter out certain values from the original list (or other iterable).", "para_3": "In this example, the original iterable was a range. If a value in that range is odd (the remainder of dividing by 2 is 1), then we apply the transformation (multiplying by 2). Note that values are filtered out before the transformation is applied. If we had doubled the numbers and then filtered out the even ones, then the new list would have been empty.", "para_4": "We can also use a list comprehension to filter without applying a transformation:", "para_5": "Don't let this new use of the for and if keywords confuse you. List comprehensions are a separate thing from for loops and if statements."}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "(See the module overview for a link to example solutions.)", "para_1": "1. Write a function named every_other that takes as a parameter a list and returns a list that only contains every other element starting with the first one. For example, if the original list is [7, \"joe\", \"apple\", 9.81, False], then the new list should be [7, \"apple\", False]. Use slicing.", "para_2": "2. Write a function named array_sum that takes as a parameter a list of strings and returns the total number of characters in all the strings.", "para_3": "3. Write a function named rev_string_list that takes as a parameter a list of strings and returns a list that contains the reverse of each of those strings. Use a list comprehension.", "para_4": "4. Write a function named contain_string that takes as a parameter a list of strings and the target string, and returns a list of the strings from the original list that contain the target string. Use a list comprehension.\u00a0"}, "li_sentences": {}}}, "heading_sentences": ["Exploration: Lists"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {}, "preh2_links": {}}