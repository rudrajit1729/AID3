{"content": {"Introduction": {"para_sentences": {"para_0": "In this section, we will look into yet another problem that can be solved using the Greedy technique.", "para_1": "As you go through this section, try to answer the following questions:"}, "li_sentences": {"ul_0": ["How to identify if an algorithm can be solved using the Greedy technique?", "How to approach the design of a greedy algorithm?", "How to implement a Greedy algorithm technique?"]}}, "Minimizing Lateness Problem": {"para_sentences": {"para_0": "Problem: You have a list of assignments [A, B, C, D]. You are provided with the time that it takes to solve these assignments, timetaken[t1, t2, t3, t4] and the deadline of each of the assignment, deadline[d1, d2, d3, d4].", "para_1": "Where t1 corresponds to the time taken to complete Assignment A, which is due on d1.", "para_2": "Your goal is to complete the assignments in such a way that you minimize the total lateness for the assignments. You need to return the minimum (Maximum lateness).", "para_3": "Assume units for timetaken and deadline are days.", "para_4": "For example:", "para_5": "If assignments = [A, B, C, D]; timetaken=[1, 2, 3, 4] and deadline=[2,4,5,7].\u00a0", "para_6": "One way of doing the assignments is to start with assignment A. It will take 1 day to finish it and will be submitted on Day 1, resulting in 0 lateness. Next, we start with assignment B. It will take 2 days time and will finish on Day 3, again resulting in 0 lateness since the due date is Day 4 for assignment B. The below animation demonstrates this. Overall we will obtain lateness of 0 for assignment A, 0 for assignment B, 1 for assignment C and 3 for assignment D. So the maximum lateness, if we do assignments in this order, is 3. We can do the assignments in a different order and obtain a different amount of maximum lateness.\u00a0", "para_7": "Consider another example:", "para_8": "assignments = [A, B, C, D]; timetaken=[2, 3, 1, 5] and deadline=[2, 4, 6, 7].", "para_9": "Following are two random ways of doing these assignments. Observe how the lateness is calculated in each case.", "para_10": "Option 1:", "para_11": "", "para_12": "Option 2:", "para_13": "", "para_14": "\u00a0", "para_15": "This problem can be solved in different ways. When making a selection of the assignments we can first pick the assignment that would take minimum amount time to perform or we can pick an assignment which is due first.\u00a0\u00a0", "para_16": "Let us analyze each of the techniques for solving this problem. ", "para_17": "First, pick assignment with the shortest time to perform.", "para_18": "\u00a0", "para_19": "This would not always give us an optimal solution, one counterexample is:\u00a0", "para_20": "This approach will result in the selection of Assignment A, followed by Assignment B. It will result in maximum lateness of 1.", "para_21": "But the optimal solution is to first do assignment B, then do assignment A. This will result in maximum lateness of 0. ", "para_22": "Another approach would be to pick assignment with minimum slack time, i.e those which would have no extra time based on the amount of work needed (deadline- TimeTaken).", "para_23": "\u00a0", "para_24": "This would not always give us an optimal solution, one counterexample is:\u00a0", "para_25": "This approach will result in the selection of assignment B, followed by assignment A, which would result in the lateness of 9.", "para_26": "But, the optimal solution will be to first perform assignment A, followed by assignment B, which would result in the lateness of 1. ", "para_27": "The third approach will be to first select assignments based on their due date, and the minimum deadline assignment would be selected first. The following animation demonstrated this approach for assignments = [A, B, C, D]; timetaken=[1, 2, 3, 4] and deadline=[2, 4, 5, 7].This seems to be a reasonable one to proceed with.", "para_28": "For this, we would first sort the assignments in the increasing order of their deadlines and then calculate the minimum lateness. Pseudocode for this approach is:", "para_29": "The time complexity for this algorithm will be dominated by the time take to sort the deadlines. Which would take O(n log n) if we use the efficient sorting technique. Space complexity will be \u0398(n)that is used to store the final schedule."}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": "You are given assignment details in the form a tuple of (Assignment_name, TimeTaken , Deadline).", "para_1": "Assignment = [(\"A\" , 2 , 2 ),( \"B\" , 3 , 4 ), ( \"D\" , 5 , 7 ),  ( \"C\" , 1 , 6 )] Return the minimum possible lateness and the schedule.", "para_2": "Above example would return: 4, ['A', 'B', 'C', 'D']", "para_3": "The solution is in solution.py. Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..", "para_4": ""}, "li_sentences": {"ul_0": ["Implement the Minimizing Lateness Problem in below code editor"]}}}, "heading_sentences": ["Exploration 6", "1: Greedy Algorithms - Minimizing Lateness Problem"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]]}, "preh2_links": {}}