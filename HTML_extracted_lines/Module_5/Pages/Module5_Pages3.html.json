{"content": {"Introduction": {"para_sentences": {"para_0": "In this section, we will explore the Greedy technique to solve some algorithms. We will see the required characteristics of a problem to apply the Greedy Technique. We will also explore the limitations of Greedy Algorithms.", "para_1": "As you go through this section, try to answer the following questions:"}, "li_sentences": {"ul_0": ["What is the Greedy algorithm technique?", "What are the limitations of Greedy technique?", "Difference between Greedy technique and Dynamic Programming Approach?"]}}, "Greedy Algorithms": {"para_sentences": {"para_0": "The idea behind Greedy Algorithms is to make the best (Greedy) choice at each step of solving the problem with the hope that this will ultimately lead to the optimal solution.\u00a0", "para_1": "Let us understand this with an example. Do you remember the Change Making Problem from previous modules? Given some currency denominations say [1, 5, 10, 25, 100] we need to make a change for a given amount with the minimum number of coins.\u00a0", "para_2": "Let us say the amount is 30.", "para_3": "When applying the greedy approach we will look for the best possible choice at each iteration. The first best choice will be a coin of denomination 25. This will result in the remaining amount of 5, for which the best possible choice will be selecting a coin with the denomination of 5. This will give us a solution of {25, 5}. Isn't the greedy algorithm straight forward? But there is a limitation to this approach which we will look in a bit.", "para_4": "Firstly, let us look at the characteristics of problems that can be solved using Greedy technique.", "para_5": "Observe how the change-making problem satisfies these two properties.", "para_6": "For the change-making problem, the sub-problem is to find the greedy choice for amount 30 (solution = {25}), then to find a greedy choice for amount 5 (solution = {5}) (Optimal Substructure). We able to find the solution to the whole problem by making locally best choices (Greedy Choice Property)", "para_7": "To make a greedy algorithm first identify the optimal substructure in the problem and devise a way to iteratively go through the sub-problems to find the solution.\u00a0"}, "li_sentences": {"ol_0": ["Greedy Choice Property: A globally optimal solution can be obtained by making a locally optimal choice", "Optimal Substructure: We have seen this term in the dynamic programming section"]}}, "Activity Selection Problem": {"para_sentences": {"para_0": "You are given a list of activities {a1, a2,...an} with their start times [s1, s2,...sn] and end times [e1,e2,....en].\u00a0\u00a0", "para_1": "Example: activities: {Play Golf, Paint, Cook, Sleep, Jog, Write Code, Eat}", "para_2": "start times: [1, 3, 1, 3, 4, 6, 8]", "para_3": "end times: [3, 4, 4, 6, 6, 9, 9]", "para_4": "You are equally interested in all of them. Your goal is to maximize the number of activities that you can perform. You cannot choose overlapping activities, for example, 'cook' and 'paint'. You can choose activities that immediately start after the previous one ends, for example, 'Play Golf' and 'Paint'.\u00a0", "para_5": "", "para_6": "Take a few minutes to think about how you would solve this problem. Suppose you don't know any of the programming techniques and try to think greedily to solve the problem.\u00a0", "para_7": "Thinking greedily to pick the best choice we think of these approaches:", "para_8": "Approach 1:\u00a0 We can arrange the activities in the order of start times and pick one after another such that none overlaps. But would this give the maximum number of non overlapping activities? Here is a counter example:", "para_9": "For below activities, our approach would give us the solution to be : {'A'}", "para_10": "But, the optimal solution comprises of two activities: {'B', 'C'}", "para_11": "", "para_12": "Approach 2: Arrange the activities in the order of the end times and pick the ones that end first followed by the next possible non-overlapping activity that ends first and so on. This sounds like a reasonable approach. See below animation to see how we would proceed with the selection.", "para_13": "\u00a0", "para_14": "\u00a0", "para_15": "", "para_16": "Since the activities are sorted we iterate through them in order. To begin, we chose the first activity that has the earliest finish time amongst all of the activities. We update the \"blocked_time\" with the end time of the chosen activity so that we can pick our next activity that starts immediately after the \"blocked_time\". We repeat until we cover all the activities.", "para_17": "Time Complexity: The running time of our solution will be O(n). Space complexity will be O(n).", "para_18": "\u00a0", "para_19": "", "para_20": "Let us prove the correctness of our algorithm. There are different ways of proving a greedy algorithm. We will prove our algorithm's correctness using two methods. Watch below videos for the proofs.", "para_21": "1. Greedy Stays Ahead Method ( This is done in two parts):\u00a0", "para_22": "Part 1: At each iteration the algorithm finds the best possible solution. i.e. the algorithm has found the best possible solution, which is optimal.", "para_23": "Part 2: The solution of the problem is optimal. i.e. The number of non overlapping problems found by the Algorithm is an optimal solution.", "para_24": "Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_25": "\u00a0", "para_26": "2. Exchange Argument Method:", "para_27": "Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_28": "\u00a0", "para_29": "The Activity Selection Problem has many real-life applications. One classic application is scheduling a room for multiple competitions in an event so that the maximum number of competitions can be fit in.\u00a0", "para_30": "The advantages of Greedy algorithms are: These\u00a0are often efficient compared to other algorithms. These are easy to implement.", "para_31": "\u00a0", "para_32": "", "para_33": "For the amount 14, the best choice of the denomination is {10}, then for the remaining amount of 4 best choice is {1,1,1,1}. But is this the optimal solution for this change-making problem? No, {7,7} is the solution with a minimum number of coins. This brings us to the limitations of the Greedy Algorithms. Read on.", "para_34": "The greedy algorithm does not always give us the correct solution, rather we get an approximate solution most of the time. To get a correct solution it is very important to first identify the optimal substructure and check that in each step we consider the solution that would be closest to an optimal solution. If a problem cannot be solved by a greedy technique, we can solve it using the dynamic programming technique.", "para_35": "The limitations of the Greedy Algorithms:", "para_36": "1. Greedy solution would not always result in an optimal solution. It is difficult to verify the correctness of the solution.", "para_37": "2. Hard to design: Sometimes it is challenging to find the right greedy approach to solve a problem.", "para_38": "As discussed above the Greedy technique works with problems with optimal substructure, similar to dynamic programming problems. But the difference is that in Greedy algorithms we can right away find the optimal solution in each subproblem and move on. Another difference is that in Greedy algorithms, each problem depends only on one subproblem unlike in dynamic programming where we had to check the best possible solution from previously solved subproblems.", "para_39": "", "para_40": "Inspired from Lecture 12 Greedy Algorithms, Design and Analysis of Algorithms, MIT, CC BY-NC-SA 4.0\n\n\nLinks to an external site. "}, "li_sentences": {}}, "Exercises": {"para_sentences": {"para_0": ""}, "li_sentences": {"ul_0": ["Implement the solution based on the pseudocode in below code editor"]}}, "Optional Additional Resources": {"para_sentences": {"para_0": "If this topic interests you, then you might find the following optional resources useful."}, "li_sentences": {"ul_0": ["CLRS book Chapter 16  section 16"]}}}, "heading_sentences": ["Exploration 5", "3: Greedy Algorithms - Activity Selection Problem"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]], "ol_0": [[]]}, "preh2_links": {}}