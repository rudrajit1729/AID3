{"content": {"Introduction": {"para_sentences": {"para_0": "In this section and the next one we will discuss one of the common problems that can be solved using dynamic programming, it is called a knapsack problem. There are multiple versions of this problem we will look at two of them in this module.\u00a0", "para_1": "At the end of this section, you will be able to solve an unbound knapsack problem. (MLO2)", "para_2": "As you go through this section, try to answer the following questions:"}, "li_sentences": {"ul_0": ["What is a knapsack problem?", "How to solve an unbounded knapsack problem?"]}}, "Knapsack Problem": {"para_sentences": {"para_0": "Suppose you woke up on a mysterious island and there are numerous valuable items on the island. You have a knapsack (a bag) with you which you can use to take back these items with you. But, the problem is there is a limit to the weight that your knapsack can carry. So, our questions would be what is the best way to cram items into our knapsack to maximize the overall value of items that you can carry back with you.", "para_1": "We have n items with their weights wi and values vi. We are given the total capacity of the knapsack, W.", "para_2": "For example,", "para_3": "Consider items with weights w = [4, 9, 3, 5, 7]", "para_4": "and their corresponding values v = [10, 25, 13, 20, 8]", "para_5": "The knapsack that we have cannot carry weight more than W = 10", "para_6": "", "para_7": "There are two versions of the knapsack problems:", "para_8": "In the case of the unbounded knapsack, we have unlimited copies of all the items.", "para_9": "What is the best way to maximize the value of our knapsack in this case?", "para_10": "\u00a0", "para_11": "", "para_12": "2. 0-1 knapsack", "para_13": "In the case of the 0-1 knapsack, we have only one copy of each item. We can either chose a given item or we don't choose an item to maximize the value of our knapsack. We will look more into this in the next section.", "para_14": "Based on the approach that you used to solve the unbounded knapsack activity, do you think we can solve this problem using dynamic programming?\u00a0", "para_15": "Yes, the problem has overlapping subproblems. We pick one item and see the best solution that can be obtained with the remaining capacity of the knapsack. We repeat this procedure until we find the optimal solution. Our approach has both overlapping subproblems and optimal substructure.", "para_16": "We have infinite copies of all the items and we have to maximize the value of our knapsack.", "para_17": "Let us follow the steps that we have seen before to solve a dynamic programming problem.", "para_18": "Step 1: The parameters that impact the problem: The capacity of the knapsack is the only parameter that would change with every iteration.\u00a0", "para_19": "Step 2: Identify the subproblem:\u00a0We will find the solution for a smaller knapsack first, then for a bigger one and then an even bigger one until we reach W.\u00a0", "para_20": "The subproblem will be, the optimal solution for a knapsack of capacity x. The value of x cannot be greater than W. We can write it as f[x].\u00a0", "para_21": "So, our subproblem will be", "para_22": "f[x] = optimal value for a knapsack of capacity x.", "para_23": "", "para_24": "Step 3: Define the recurrence formula including the base case.", "para_25": "To solve our knapsack of capacity x: If our bag has a capacity of x, we can try putting in the bag each item of weight wi, and find an optimal solution for a subproblem for a knapsack of weight x-wi (i.e. the remaining capacity after placing ith item).", "para_26": "If W=5, w=[1, 2, 3, 4], v=[10, 20, 5, 15]", "para_27": "f[x] would look like a one-dimensional array of size W+1. When x=0, the optimal value will be 0 (base case).\u00a0", "para_28": "We shall try all weights from w[] to find the best value for x=1 subproblem.\u00a0", "para_29": "So, for each item i, we will place it in our knapsack and find the value of the choice", "para_30": "\u00a0= vi + [best solution for knapsack of capacity x-wi]", "para_31": "Watch the video below for the explanation of the approach to solve the subproblems. Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_32": "\u00a0", "para_33": "\u00a0", "para_34": "This brings us our recurrence formula:", "para_35": "", "para_36": "0<i\u2264n;wi<x", "para_37": "vi : value of ith item", "para_38": "wi : weight of ith item", "para_39": "Step 4: Turn the recursive formula into dynamic programming algorithm", "para_40": "Since our recursive formula is a function of a single variable (x), we will store the answers to our subproblems in a 1-dimensional array, this will be our cache.", "para_41": "This can be better solved with a bottom-up approach. If we are able to find the best solution for a knapsack of smaller size then we find the optimal solution for the bigger size knapsack.", "para_42": "Can you write the pseudocode to solve unbound knapsack problem?", "para_43": "Based on the pseudocode, try writing the code for the knapsack problem in the below code editor. The solution is provided in solution.py file. Optionally, you can access the solution from the GitHub link\n\n\nLinks to an external site..", "para_44": "", "para_45": "As you might have noticed in the code, we are filling our cache of all subproblems in dp[] array with maximum possible subsolution in the statement:", "para_46": "Time complexity analysis: We are iterating through two for loops, one for all possible weight values until the capacity W of the knapsack, and the second loop to iterate over all possible n items. This gives us a time complexity of O(n*W).", "para_47": "\u00a0", "para_48": "In the next section, we will solve the 0-1 knapsack problem.", "para_49": "The Knapsack algorithm can be used in a lot of real-world decision making situations like internet download managers, the data to be downloaded is broken into chunks and server uses this algorithm to pack these chunks to use the maximum available limit. You can read a few more applications here\n\n\nLinks to an external site.."}, "li_sentences": {"ol_0": ["Unbounded knapsack"]}}}, "heading_sentences": ["Exploration 4", "1: Dynamic Programming - Unbound Knapsack Problem"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]], "ol_0": [[]]}, "preh2_links": {}}