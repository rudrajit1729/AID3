{"content": {"Introduction": {"para_sentences": {"para_0": "In this section, we will look at few NP-Complete and NP-Hard problems. We will also see how to show a problem to be NP-Complete.", "para_1": "As you go through this section, try to answer the following questions:"}, "li_sentences": {"ul_0": ["What are some examples of NP-Complete and NP-Hard problems?", "What is meant by a reduction in polynomial time?", "How do we reduce one problem to another one?", "How do we show a problem to be NP-Complete?"]}}, "CIRCUIT SAT PROBLEM": {"para_sentences": {"para_0": "Let us look at a popular problem called Circuit SAT. Go through the below deck to understand the problem.", "para_1": "\u00a0", "para_2": "\u00a0", "para_3": "Two Computer Scientists, Cook and Levin, independently proved a remarkable theorem that showed the Circuit (Boolean) SAT problem is NP-Hard. Which means any problem in NP can be reduced to this in a polynomial time. We will not go into the details of this theorem or the proof.", "para_4": "This implies that the Circuit SAT problem is NP-Complete; that is, it is NP-Hard and is in NP-class.", "para_5": ""}, "li_sentences": {}}, "PROVING NP-COMPLETENESS": {"para_sentences": {"para_0": "To show a problem is NP-Complete, there are two steps:", "para_1": "We have seen before that we can use reduction to transform one problem into another. If we want to show that our problem X is NP-Hard:", "para_2": "", "para_3": "Now, we can argue that if there exists a polynomial-time algorithm to solve problem X, then problem AHard could be solved in polynomial time. If the problem AHard could be solved in polynomial time then P=NP. This implies problem X is NP-Hard.", "para_4": "The magic algorithm box that we saw in our reduction step is called a BlackBox. We don't know how it does the job but we know that it would give us our required output.", "para_5": "The below deck explains what a 3SAT problem is and how to show it to be NP-Complete.", "para_6": "\u00a0", "para_7": "The below deck explains what is a Independent Set problem and how to show it to be NP-Complete.", "para_8": "\u00a0", "para_9": "'NP-Complete proof template' provided in the optional reading material could be handy resource when you want to prove for NP-completeness. Refer to the optional reading section if you would like additional reading material on this topic.", "para_10": "The below graph shows a list of NP-Complete problems that are proved with the help of other known NP-Hard problems. You have seen a few of the problems like the Knapsack problem. ", "para_11": "", "para_12": "credits: Taken from Julianne Schutfort's lecture material.", "para_13": "\u00a0"}, "li_sentences": {"ol_0": ["Show that it belongs to NP-Class  in other words it can be verified in polynomial time", "Show that the problem is in NP-Hard"], "ul_0": ["We pick a known NP-Hard problem  say AHard", "We will show that we can reduce problem AHard to problem X", "To show that we can transform problem AHard to problem X in polynomial time", "To show that if there was some magic algorithm to solve problem X  then we can obtain the solution for the problem AHard using some polynomial transformation(f) if needed"]}}, "Optional Additional Resources": {"para_sentences": {"para_0": "If this topic interests you, then you might find the following optional resources useful."}, "li_sentences": {"ul_0": ["Algorithms by Jeff Erickson book  Chapter 12", "Algorithms by Jeff Erickson book  Chapter 12 section 12", "Refer to the NP-Complete proof template to prove that a problem is NP-Complete   Actions   Preview Download Alternative formats  ", "Preview", "Download", "Alternative formats"]}}}, "heading_sentences": ["Exploration 9", "2: NP-Completeness"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ul_0": [[]], "ol_0": [[]]}, "preh2_links": {}}