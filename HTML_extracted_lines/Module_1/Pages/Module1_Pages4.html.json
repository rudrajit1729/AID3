{"content": {"Introduction": {"para_sentences": {"para_0": "An important aspect of an algorithm is that it produces correct output over a broad range of inputs. We might run our algorithm for some sample input values and verify it's correctness, but this ensures correctness for the values that we have tested not for all possible inputs. At the end of this section, you will be able to formally prove the correctness of an algorithm (MLO3).", "para_1": "As you read this section consider answering the following questions:"}, "li_sentences": {"ol_0": ["What are the general steps to formally prove the correctness of an algorithm?", "What is a loop invariant?", "How to identify a loop invariant?"]}}, "Verifying an algorithm": {"para_sentences": {"para_0": "The first thing to do when we write or encounter a new algorithm is to convince ourselves that it is correct, which means it produces correct output for all valid inputs.", "para_1": "To get some insights into empirically verifying correctness by taking some sample inputs and executing the algorithm, read 'empirical analysis section' in  the KhanAademy site\n\n\nLinks to an external site. .", "para_2": "\u00a0Empirical analysis cannot assure the correctness for all range of inputs that we have not tried, so formally we could use mathematical reasoning over all possible inputs.", "para_3": "Intuitively, to prove that a loop executes correctly, we want to show that it works for the first iteration,\u00a0 then for the second iteration and so on until the last iteration. Additionally, we want to show that the loop terminates. This idea is similar to 'mathematical induction'. See in 'supplementary help' section below for a refresher on Mathematical Induction.", "para_4": "There are two steps to prove the correctness of an algorithm:", "para_5": "The word 'invariant' means 'never changing or something that is true always'. A loop invariant is some property that holds true for every iteration of the loop.", "para_6": "For example, consider the pseudocode to find the maximum number in a list of numbers.\u00a0", "para_7": "Here the loop invariant is: the variable 'max' always holds the maximum number among the first i elements of the list.", "para_8": "You can use these general tips to find a loop invariant:", "para_9": "Common mistake is to describe the code in the loop and state it as loop invariant. For findMax function it would be incorrect to state the loop invariant as \"If ith\u00a0element is greater than max then max is assigned with the ith\u00a0element\"; although technically it might be true but we are looking for a property of the loop that could be a loop invariant.", "para_10": "\u00a0", "para_11": "The following video explains the proof of correctness of insertion sort algorithm, which is an iterative algorithm. For a refresher on insertion sort refer to the explanation provided by  Khan Academy\n\n\nLinks to an external site. . Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_12": "\u00a0", "para_13": "We followed these steps:", "para_14": "Initialization (Base Case): The loop invariant is satisfied at the beginning of the for loop.", "para_15": "Maintenance (Inductive Case): Assume that the loop invariant is true for the ith iteration, then show that the loop invariant will be true before the (i + 1)th iteration", "para_16": "Termination: When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct.", "para_17": "Let's see another example of proving the correctness of a recursive algorithm.", "para_18": "Consider the below algorithm that computes 3n for a non-negative integer n.", "para_19": "We will use a recursive invariant, which is similar to the loop variant.\u00a0", "para_20": "For recursive algorithms using strong induction is easier because the recursive structure is telling us what correctness means at all levels. To prove recursive algorithm using strong induction:", "para_21": "Base Case: It is similar to what we have seen before, we consider that the recursive invariant holds true for the base case of the recursive algorithm.\u00a0", "para_22": "Inductive Case: When we assume that the recursive invariant is true for the ith execution we also assume that it is true for all values less than ith execution until the base case value (strong induction), then we show that the invariant will be true for the (i + 1)th execution.", "para_23": "Termination: When the execution terminates, the invariant gives us a useful property that helps show that the algorithm is correct.", "para_24": "Proof:", "para_25": "Recursion invariant: At each recursive call, ThreePower(k) returns 3k", "para_26": "Initialization (Base Case): When k = 0, ThreePower(k) returns 1 = 30, which is correct.", "para_27": "Maintenance (Inductive Case):\u00a0", "para_28": "We can divide this into two cases: k is even, and k is odd. Suppose k is even.", "para_29": "Then the algorithm sets x to ThreePower(k/2), which by the recursion invariant is 3k/2. The algorithm then returns x \u2217 x, which is 3k/2\u00b7 3k/2 = 3k.", "para_30": "Suppose k is odd.", "para_31": "Then the algorithm sets x to ThreePower((k \u2212 1)/2), which by the recursion invariant is 3(k\u22121)/2. The algorithm then returns 3 \u2217 x \u2217 x, which is 3 \u00b7 3(k\u22121)/2\u00b73(k\u22121)/2 = 3k.", "para_32": "Thus, the maintenance step holds", "para_33": "Termination: At the top level of the recursive call, ThreePower(n) gives 3n, which is the solution to the problem.", "para_34": "The following video will demonstrate how to prove correctness of a binary search algorithm. Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_35": ""}, "li_sentences": {"ol_0": ["We will prove using induction that a \"loop invariant\"  a property of the loop in the algorithm is always true", "We will show that the algorithm eventually terminates"], "ul_0": ["Use your intuition and try to understand what the code does", "In a list  a loop invariant usually speaks about the part of the list that has been processed so far in the loop", "A loop invariant is true even if the loop condition is false i"], "ol_1": ["Identify the loop invariant", "Use Induction to prove that the loop invariant holds true"]}}, "Exercises": {"para_sentences": {"para_0": "\u00a0"}, "li_sentences": {}}, "Optional Additional Resources": {"para_sentences": {"para_0": "Refer to the following resources for additional reading."}, "li_sentences": {"ul_0": ["Chapter 2 - \u2018Loop invariants and the correctness of insertion sort\u2019 in Section 2"]}}, "Supplementary Help": {"para_sentences": {}, "li_sentences": {"ul_0": ["Empirically: means working with actual data", "Recursion and Iteration: means to execute a set of executing a set of instructions repeatedly", "Mathematical Induction   Links to an external site"]}}}, "heading_sentences": ["Exploration 1", "4: Proving Correctness of an Algorithm"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {"ol_0": [[]], "ul_0": [[]], "ol_1": [[]]}, "preh2_links": {}}