{"content": {"Introduction": {"para_sentences": {"para_0": "In this exploration, we will use the notations from the previous exploration. By the end of this section, you should be able to analyze the time complexity of simple non-recursive algorithms. (MLO2)"}, "li_sentences": {}}, "Analysis of Non-Recursive Algorithms": {"para_sentences": {"para_0": "Let us consider the example of finding the maximum number in an array of size n and use it to outline the general steps to find the time complexity mathematically.", "para_1": "What is the parameter that impacts the execution time of this algorithm? It is array size n.\u00a0", "para_2": "What is the operation that will be executed most often in this algorithm?", "para_3": "The instructions in the for loop 'if A[i] > max' and 'max = Arr[i]'. Among these two operations the comparison will execute for each iteration of the loop and the assignment will be executed only when the comparison is true. Hence we can say 'if A[i] > max' is the most executed operation in the algorithm.", "para_4": "Note that we did not consider the loop while identifying the basic operation. We'll explain more about this towards the end of the exploration.", "para_5": "Another question to keep in mind is whether the number of comparisons will vary for different arrays of size n. Here, the number of comparisons will be the same for all arrays of size of n. Hence, we need not distinguish between the worst, best and average cases for this algorithm.", "para_6": "Let's look at the number of the times the comparison is executed, and find its expression as a function of its input parameter n. The algorithm makes one comparison for each iteration of the for loop, which repeats from 1 to n-1. Hence we can write our expression as", "para_7": "T(n) =\u00a0 \u2211n\u22121i=11", "para_8": "This is easy to compute as it is 1 repeatedly added n-1 times.", "para_9": "T(n) = \u2211n\u22121i=11= n-1 \u2208 \u0398(n)", "para_10": "These are the general steps that we followed:", "para_11": "Step 1: Identify the input parameter(s) that would impact the running time of the algorithm", "para_12": "Step 2: Identify the\u00a0basic\u00a0operation, that would be executed a maximum number of times and impacts the execution time of the algorithm (this is usually located in the innermost loop)", "para_13": "Step 3: Determine worst, average, and best cases for the input of size n, if the number of times the basic operation gets executed varies with specific instances of input\u00a0", "para_14": "Step 4: Set up a sum for the number of times the basic operation is executed and simplify it using standard summation formulas", "para_15": "Let's see one more example:", "para_16": "Consider an algorithm that checks whether the elements in an array are distinct or not.", "para_17": "What is the parameter that would impact the execution time of this algorithm? The array size n.", "para_18": "What is the basic operation that would be executed most often in this algorithm?", "para_19": "The comparison instruction 'if\u00a0A[i]= A[j]' in the innermost for loop.", "para_20": "Would the number of times the basic operation is executed vary for different arrays of a given size n?", "para_21": "Yes. There can be a scenario for a given n when the loop would exit prematurely without completing all the possible iterations of the loop. This could happen when the first two elements are equal (ex: [3,3,1,4,6]), and would be the best case of execution.\u00a0The worst case scenario for an array of equal size could occur when the loops iterate through each item of the list without exiting prematurely.\u00a0(ex: [2,3,1,4,6]).\u00a0In this scenario,\u00a0the algorithm would take maximum time to give us results.", "para_22": "Let us set up the summation for the worst case of execution. For each value i of the outer loop, the inner loop runs between limits i+1 to n-1. This is repeated for all values of i from 0 to n-2.", "para_23": "\u00a0", "para_24": "Tworst(n)=n\u22122\u2211i=0n\u22121\u2211j=i+11\u00a0 \u00a0", "para_25": "Inner summations can be simplified as: n\u22121\u2211j=i+11=n\u22121\u2211j=11\u2212i\u2211j=11=n\u2212i\u22121 ; in other words adding 1 a total of [n-1 - (i+1) +1]\u00a0times\u00a0 \u00a0", "para_26": "Tworst(n)=n\u22122\u2211i=0[(n\u2212i\u22121)]", "para_27": "=n\u22122\u2211i=0(n\u22121)\u2212n\u22122\u2211i=0i\u00a0", "para_28": "=(n\u22121)n\u22122\u2211i=01\u2212n\u22122\u2211i=0i \u00a0", "para_29": "=(n\u22121)2\u2212(n\u22122)(n\u22121)2 \u00a0", "para_30": "=(n\u22121)n2\u00a0", "para_31": "\u224812n2\u00a0", "para_32": "\u2208O(n2)\u00a0", "para_33": "\u00a0", "para_34": "What would be time complexity of the below algorithm that computes multiplication of two n x n matrices? Try this yourself before you see the explanation provided below.", "para_35": "This video explains the answer to this question, I encourage you to try it by yourself before seeing the answer. Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_36": "\u00a0", "para_37": "The below video analyses the time complexity of a couple of sample functions. Access video notes here\n\n\nActions\n\n\nPreview\nDownload\nAlternative formats\n\n.", "para_38": "\u00a0", "para_39": "You might still be wondering\u00a0why we did not consider the for loop which is executed (n+1) times. The reason is that for simple loops it is\u00a0straightforward\u00a0to tell the time complexity by looking at the execution of the loop, but\u00a0 that is not always the case. For example, if you look at example 3 in the video above, we need to pick a basic operation within the loop and identify the number of times it is executed\u00a0so that we can attain an accurate time complexity.", "para_40": "This video explains how to\u00a0 determine whether\u00a0we have found Big O, Theta or Omega.", "para_41": "", "para_42": "If the running time calculations gave you a value of n2+n\u221210; We can ignore the lower order terms and just use the higher order term to represent the time complexity; In this case it is O(n2).", "para_43": "\u00a0", "para_44": "\u00a0", "para_45": "\u00a0", "para_46": "Question 1 \u00a0", "para_47": "Question 2 \u00a0"}, "li_sentences": {}}}, "heading_sentences": ["Exploration 1", "3: Mathematical Analysis of Algorithms"], "__pre_h2__": {"pre_h2_para_sentences": {}, "pre_h2_li_sentences": {}}, "content_links": {}, "preh2_links": {}}